import {h} from 'dom-chef';
import select from 'select-dom';
import delegate from 'delegate';
import debounce from 'debounce-fn';
import {observeEl} from '../libs/utils';

let activity = false;

function getStatus() {
	const commit = select.all('.commit-build-statuses > :first-child').pop();
	if (commit.matches('.text-green')) {
		return 'success';
	}
	if (commit.matches('.text-red')) {
		return 'failure';
	}
	return 'pending';
}

function canMerge() {
	return select.exists('.merge-message [type="submit"]:not(:disabled');
}

function getLastCommit() {
	return select.all('.timeline-commits .commit-id').pop().textContent;
}

function getCheckbox() {
	return select('[name="rgh-pr-check-waiter"]');
}

// Only show the checkbox if there's a pending commit
function showCheckboxIfNecessary() {
	const checkbox = getCheckbox();
	const isNecessary = getStatus() === 'pending';
	if (!checkbox && isNecessary) {
		const container = select('.commit-form-actions .select-menu');
		if (container) {
			container.append(
				<label class="d-inline-block">
					<input type="checkbox" name="rgh-pr-check-waiter" checked/>
					{' '}
					Wait for successful checks
				</label>
			);
		}
	} else if (checkbox && !isNecessary) {
		checkbox.parentNode.remove();
	}
}

function setActivity(newActivity) {
	activity = newActivity || false;

	// Disable fields if there's activity
	for (const field of select.all(`
		[name="commit_message"],
		[name="commit_title"],
		[name="rgh-pr-check-waiter"],
		.js-merge-commit-button
		`)) {
		field.disabled = Boolean(activity);
	}
}

function handleMergeConfirmation(event) {
	if (getCheckbox().checked) {
		setActivity({
			clickedButton: event.target,
			acceptedCommit: getLastCommit()
		});
		event.preventDefault();
	}
}

function handleUpdate() {
	console.log('#### update');
	showCheckboxIfNecessary();
	if (!activity) {
		return;
	}

	// Cancel submission if a new commit was pushed
	if (getLastCommit() !== activity.acceptedCommit) {
		console.log('changed commit');
		setActivity(false);
		return;
	}

	// Ignore update if the status hasn't changed
	const status = getStatus();
	if (status === 'pending') {
		console.log('pending');
		return;
	}

	// Failed or succeeded, the form must be reactivated
	// but we need to save the button first
	const {clickedButton} = activity;
	setActivity(false);
	if (status === 'success') {
		console.log('success');
		clickedButton.click();
	}
}

export default function () {
	if (canMerge() && !select.exists('.rgh-wait-for-build')) {
		document.body.classList.add('rgh-wait-for-build');

		const container = select('.discussion-timeline-actions');

		// The merge form is regenerated by GitHub on every update
		observeEl(container, showCheckboxIfNecessary);

		// One of the merge buttons has been clicked
		delegate(container, '.js-merge-commit-button', 'click', handleMergeConfirmation);

		// Cancel wait when the user presses the Cancel button
		delegate(container, '.commit-form-actions button:not(.js-merge-commit-button)', 'click', () => setActivity(false));

		// Watch for updates, but wait a bit because the DOM might be updated later
		select('.js-discussion')
			.addEventListener('socket:message', debounce(handleUpdate, {wait: 500}));

		// Warn user if it's not yet submitted.
		// Sadly no way to show a message
		window.onbeforeunload = () => activity;
	}
}
