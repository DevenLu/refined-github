import {h} from 'dom-chef';
import select from 'select-dom';
import onetime from 'onetime';
import delegate from 'delegate';
import debounce from 'debounce-fn';
import {observeEl} from '../libs/utils';
import * as prCiStatus from '../libs/pr-ci-status';

let waiting = null;

// Reuse the same checkbox to preserve its status
const generateCheckbox = onetime(() => (
	<label class="d-inline-block">
		<input type="checkbox" name="rgh-pr-check-waiter" checked/>
		{' '}
		Wait for successful checks
	</label>
));

function canMerge() {
	return select.exists('.merge-message [type="submit"]:not(:disabled');
}

function getCheckbox() {
	return select('[name="rgh-pr-check-waiter"]');
}

// Only show the checkbox if there's a pending commit
function showCheckboxIfNecessary() {
	const checkbox = getCheckbox();
	const isNecessary = prCiStatus.get() === prCiStatus.PENDING;
	if (!checkbox && isNecessary) {
		const container = select('.commit-form-actions .select-menu');
		if (container) {
			container.append(generateCheckbox());
		}
	} else if (checkbox && !isNecessary) {
		checkbox.parentNode.remove();
	}
}

function disableForm(disabled = true) {
	for (const field of select.all(`
		[name="commit_message"],
		[name="commit_title"],
		[name="rgh-pr-check-waiter"],
		.js-merge-commit-button
		`)) {
		field.disabled = disabled;
	}
}

async function handleMergeConfirmation(event) {
	if (getCheckbox().checked) {
		event.preventDefault();

		disableForm();
		waiting = prCiStatus.wait();
		const status = await waiting;
		waiting = null; // Must be null for onbeforeunload
		disableForm(false);

		if (status === status.SUCCESS) {
			event.target.click();
		}
	}
}

export default function () {
	if (canMerge() && !select.exists('.rgh-wait-for-build')) {
		document.body.classList.add('rgh-wait-for-build');

		const container = select('.discussion-timeline-actions');

		// The merge form is regenerated by GitHub on every update
		observeEl(container, showCheckboxIfNecessary);

		// One of the merge buttons has been clicked
		delegate(container, '.js-merge-commit-button', 'click', handleMergeConfirmation);

		// Cancel wait when the user presses the Cancel button
		delegate(container, '.commit-form-actions button:not(.js-merge-commit-button)', 'click', () => disableForm(false));

		// Watch for updates, but wait a bit because the DOM might be updated later
		select('.js-discussion')
			.addEventListener('socket:message', debounce(showCheckboxIfNecessary, {wait: 500}));

		// Warn user if it's not yet submitted.
		// Sadly no way to show a message
		window.onbeforeunload = () => waiting;
	}
}
